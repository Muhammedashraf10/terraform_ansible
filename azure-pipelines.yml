trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: runTerraformInitAndValidate
  displayName: Terraform
  jobs:
    - job: validateTerraformFiles
      displayName: Validate Terraform
      steps:
      - bash: terraform init
        displayName: Run Terraform init
      - bash: terraform validate
        displayName: Run Terraform validate

- stage: QualityCheckStage
  displayName: Quality Check Stage
  jobs:
    - job: TFSecJob
      displayName: Run TFSec Scan
      steps:
      # TFSec uses static analysis of Terraform templates to spot potential security issues, and 
      # checks for violations of AWS, Azure and GCP security best practice recommendations.
      # NOTE: To disable a specific check from analysis, include it in the command-line as 
      # follows: -e GEN001,GCP001,GCP002
      # Documentation: https://github.com/tfsec/tfsec
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            mkdir reports
            docker pull aquasec/tfsec:latest
            docker run --rm -v $(System.DefaultWorkingDirectory):/src aquasec/tfsec ./src -f JUnit > $(System.DefaultWorkingDirectory)/reports/TFSec-Report.xml
        displayName: 'TFSec Static Code Analysis'
        condition: always()

      # Publish the TFSec report as an artifact to Azure Pipelines
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: TFSec Report'
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/reports'
          ArtifactName: TFSecReport

      # Publish the results of the TFSec analysis as Test Results to the pipeline
      - task: PublishTestResults@2
        displayName: Publish TFSecReport Test Results
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: '**/*TFSec-Report.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/reports'
          testRunTitle: TFSec Scan
          mergeTestResults: false
          failTaskOnFailedTests: false
          publishRunAttachments: true

      # Clean up any of the containers / images that were used for quality checks
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker rmi "aquasec/tfsec:latest" -f | true
        displayName: 'Remove Terraform Quality Check Docker Images'
        condition: always()


- stage: runTerraformPlan
  displayName: Terraform
  jobs:
    - job: TerraformPlan
      displayName: Run Terraform
      steps:
      - bash: terraform init
        displayName: Run Terraform init
      - bash: terraform plan
        displayName: Run Terraform paln
